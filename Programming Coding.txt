Programming Coding

1. Data Types, Variables, Constants, and Input/Output Statements

Data Types:

Value Types: 

- Store the actual data. Examples:

int: Integer (whole number)

float: Floating point number (decimal)

char: Single character

bool: Boolean (true/false)

double: Double-precision floating point

Reference Types: Store references to objects. Examples:

string: Sequence of characters

object: A base type for all data types.

Variables:

- A variable is a storage location in memory that holds data that can be changed during the execution of a program.

int age = 25;  // Variable declaration and initialization
string name = "John"; // String variable

Constants:

- A constant is a value that cannot be changed during the programâ€™s execution. It is declared using the const keyword.

const double PI = 3.14159;  // Constant

Input/Output Statements:
Output:

Console.WriteLine("Hello, World!");  // Output message
Console.Write("Enter your name: ");

Input:

string userName = Console.ReadLine();  // Read user input as string

2. Arithmetic and Logic Operators

Arithmetic Operators:
( + ): Addition

( - ): Subtraction

( * ): Multiplication

( / ): Division

( % ): Modulus (remainder of division)

Example:

int x = 10, y = 5;
int sum = x + y; // sum = 15
int product = x * y; // product = 50

Logical Operators:

- && : AND (both conditions must be true)

- | | : OR (at least one condition must be true)

- ! : NOT (inverts the truth value)

Example:

bool a = true, b = false;
bool result = a && b; // result = false


3. Conditional Statements (if-else / switch-case)

if-else:

- Used for decision-making. The program checks a condition and executes the corresponding block of code based on whether the condition is true or false.


int age = 20;
if (age >= 18)
{
    Console.WriteLine("You are an adult.");
}
else
{
    Console.WriteLine("You are a minor.");
}


switch-case:

- Used when there are multiple possible values for a single variable.


int day = 3;
switch (day)
{
    case 1:
        Console.WriteLine("Monday");
        break;
    case 2:
        Console.WriteLine("Tuesday");
        break;
    case 3:
        Console.WriteLine("Wednesday");
        break;
    default:
        Console.WriteLine("Invalid day");
        break;
}


4. Looping (for, while, and do-while)

for loop:
- Used when the number of iterations is known beforehand.

for (int i = 0; i < 5; i++)
{
    Console.WriteLine(i); // Prints 0 to 4
}


while loop:

- Used when the condition needs to be checked before each iteration.


int i = 0;
while (i < 5)
{
    Console.WriteLine(i); // Prints 0 to 4
    i++;
}


do-while loop:

- Used when the condition is checked after each iteration.

int i = 0;
do
{
    Console.WriteLine(i); // Prints 0 to 4
    i++;
} while (i < 5);


5. Nested Operations (Nested Conditions and Nested Looping)

- Nested Conditions:
You can have conditions inside other conditions.

int age = 20;
bool hasID = true;

if (age >= 18)
{
    if (hasID)
    {
        Console.WriteLine("You can enter.");
    }
    else
    {
        Console.WriteLine("ID required.");
    }
}
else
{
    Console.WriteLine("You are too young.");
}


Nested Loops

- Loops inside other loops.


for (int i = 0; i < 3; i++)
{
    for (int j = 0; j < 3; j++)
    {
        Console.WriteLine($"i = {i}, j = {j}");  // Prints i, j combinations
    }
}


6. Array Data Structure

- An array is a collection of elements of the same type.

int[] numbers = { 1, 2, 3, 4, 5 };
Console.WriteLine(numbers[0]); // Outputs 1

You can also define an array with a specific size:

int[] numbers = new int[5]; // Array of size 5
numbers[0] = 10;

7. Functions in C# (Built-in)

- Functions (or methods) in C# allow code to be organized into reusable blocks.

Built-in Methods:

C# provides many built-in methods, such as:

Console.WriteLine(): Outputs data to the console.

Console.ReadLine(): Reads user input from the console.

Math.Abs(): Returns the absolute value of a number.

Math.Pow(): Returns the power of a number.


Example:

int num = -10;
Console.WriteLine(Math.Abs(num)); // Outputs 10


Custom Function:

static int AddNumbers(int a, int b)
{
    return a + b;
}

Console.WriteLine(AddNumbers(5, 10));  // Outputs 15

8. Errors in Programming

Errors can be classified into three main types:

Syntax Errors

- Occur when the code is not written according to the language rules.

Example: Missing semicolon.

Console.WriteLine("Hello World")  // Missing semicolon


Runtime Errors

- Occur while the program is running, like dividing by zero.

int a = 5;
int b = 0;
Console.WriteLine(a / b);  // Runtime error (division by zero)


Logical Errors

- Occur when the program runs, but the output is not as expected due to incorrect logic.

int a = 5;
int b = 3;
int result = a - b;  // Logical error if you expect addition instead of subtraction
Console.WriteLine(result);  // Outputs 2 (but might be incorrect logic)


Exception Handling (for runtime errors):

try
{
    int a = 5;
    int b = 0;
    Console.WriteLine(a / b);  // Attempt to divide by zero
}
catch (DivideByZeroException ex)
{
    Console.WriteLine("Error: " + ex.Message);  // Handle the exception
}